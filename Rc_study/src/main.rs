fn main() {
    // println!("Hello, world!");
    // 指针 一个变量在内存中包含的一个地址。（指向其它数据）
    // Rust中最常见的指针就是引用

    // 引用
    //  使用 &
    //  借用它指向的值

    // 没有其余的开销
    // 最常见的指针类型



    // 智能指针
    // 行为和指针相似
    // 有额外的元数据和功能



    // 引用计数智能指针类型
    // 通过记录所有者的数量，使一份数据被多个所有者同时持有
    // 并在没有任何所有者时自动清理数据



    // 引用： 只借用数据
    // 智能指针： 很多时候都拥有它所指向的数据


    // 智能指针的例子
    // String 和 Vec<T>
    // 都拥有一片内存区域，且允许用户对其操作
    // 还有元数据 （例如容量）
    // 提供额外的功能或保障(String 保障其数据是合并的UTF-8编码)
    


    // 智能指针的实现
    // 智能指针通常使用struct实现，并且实现了
    //  Deref和Drop 这两个 Trait


    // Deref Trait：允许智能指针struct的实例像引用一样使用，能够编写出同时适用
    // 智能指针和引用的代码

    // Drop Trait： 允许你自定义当智能指针实例走出作用域时的代码



    // 介绍标准库中常见的智能指针

    // Box<T> : 在heap内存上分配值
    // Rc<T>: 启用多重所有权的引用计数类型
    // Ref<T>和RefMut<T>, 通过RefCell<T>访问: 在运行时而不是编译时强制借用规则的类型


    // 内部可变模式, 不可变类型暴露出可修改其内部值的API
    // 引用循环: 它们如何泄露内存，已经如何防止其发生

    


}
